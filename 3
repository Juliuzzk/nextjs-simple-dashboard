'use client';

import { ProfileForm } from '@/components/dashboard/profile/ProfileForm';
import { ProfileImageCard } from '@/components/dashboard/profile/ProfileImageCard';
import { fetchUserById } from '@/services/api/users';
import { User } from '@/types/user';
import { useSession } from 'next-auth/react';
import { useEffect, useState } from 'react';

export default function ProfilePage() {
	const { data: session, status } = useSession();

	const [formData, setFormData] = useState({
		firstName: '',
		lastName: '',
		email: '',
		phone: '',
		address: '',
		bio: '',
	});

	useEffect(() => {
		if (status === 'authenticated' && session?.user?.id) {
			// Obtener la información del usuario al cargar la página
			fetchUserById(session.user.id).then((response) => {
				if (response.data) {
					const user: User = response.data;
					console.log('user:', user);
					setFormData({
						firstName: user.firstName || '',
						lastName: user.lastName || '',
						email: user.email || '',
						phone: user.phoneNumber || '',
						address: user.address || '',
						bio: user.bio || '',
					});
				}
			});
		}
	}, [session, status]);

	// Validar la autenticación después de los Hooks
	if (status === 'unauthenticated') {
		// Redirigir o mostrar un mensaje de error
		return <p>You must be logged in to access this page.</p>;
	}

	if (status === 'loading') {
		// Mostrar un spinner o mensaje de carga
		return <p>Loading...</p>;
	}

	const handleChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = e.target;
		setFormData((prev) => ({ ...prev, [name]: value }));
	};

	const handleSubmit = (e: React.FormEvent) => {
		e.preventDefault();
		console.log('Form data:', formData);

		try {
			// Asumimos que el usuario está autenticado (ya validamos al principio)
			const userData: User = {
				id: session!.user!.id, // Usamos el operador "!" porque sabemos que session.user.id existe
				firstName: formData.firstName,
				lastName: formData.lastName,
				email: formData.email,
				phoneNumber: formData.phone,
				address: formData.address,
				bio: formData.bio,
			};

			const response = await updateUser(userData);

			if (response.success) {
				console.log('User updated successfully:', response.data);
				toast.success('Profile updated successfully!');
			} else {
				console.error('Error updating user:', response.error);
				toast.error('Failed to update profile. Please try again.');
			}
		} catch (error) {
			console.error('Error in handleSubmit:', error);
			toast.error('An unexpected error occurred. Please try again.');
		}
	};

	const handleChangePhoto = () => {
		console.log('Change Photo button clicked');
	};

	return (
		<div className="space-y-6">
			<div className="flex justify-between items-center">
				<h1 className="text-3xl font-bold">Profile Settings</h1>
			</div>

			<div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
				<ProfileImageCard
					firstName={formData.firstName}
					lastName={formData.lastName}
					avatarUrl="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
					// onChangePhoto={handleChangePhoto}
				/>
				<div className="lg:col-span-2 card bg-base-200 shadow-xl">
					<ProfileForm
						formData={formData}
						onChange={handleChange}
						onSubmit={handleSubmit}
					/>
				</div>
			</div>
		</div>
	);
}
